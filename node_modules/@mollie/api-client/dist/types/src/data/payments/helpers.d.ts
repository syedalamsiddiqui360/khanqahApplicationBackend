import { Amount } from '../global';
import { PaymentData } from './data';
declare const _default: {
    /**
     * If the payment is open
     */
    isOpen: (this: PaymentData) => boolean;
    /**
     * If the payment is authorized
     */
    isAuthorized: (this: PaymentData) => boolean;
    /**
     * If the payment is paid
     */
    isPaid: (this: PaymentData) => boolean;
    /**
     * If the payment is canceled
     */
    isCanceled: (this: PaymentData) => boolean;
    /**
     * If the payment is expired
     */
    isExpired: (this: PaymentData) => boolean;
    /**
     * If the payment is refundable
     *
     * @since 2.0.0-rc.2
     */
    isRefundable: (this: PaymentData) => boolean;
    /**
     * Get the payment URL
     */
    getPaymentUrl: (this: PaymentData) => string;
    /**
     * Returns whether the payment has failed and cannot be completed with a different payment method.
     */
    isFailed: (this: PaymentData) => boolean;
    /**
     * Returns whether the payment is in this temporary status that can occur when the actual payment process has been
     * started, but has not completed yet.
     */
    isPending: (this: PaymentData) => boolean;
    /**
     * Returns whether there are refunds which belong to the payment.
     */
    hasRefunds: (this: PaymentData) => boolean;
    /**
     * Returns whether there are chargebacks which belong to the payment.
     */
    hasChargebacks: (this: PaymentData) => boolean;
    /**
     * Returns whether `sequenceType` is set to `'first'`. If a `'first'` payment has been completed successfully, the
     * consumer's account may be charged automatically using recurring payments.
     */
    hasSequenceTypeFirst: (this: PaymentData) => boolean;
    /**
     * Returns whether `sequenceType` is set to `'recurring'`. This type of payment is processed without involving the
     * consumer.
     */
    hasSequenceTypeRecurring: (this: PaymentData) => boolean;
    /**
     * Returns the URL your customer should visit to make the payment. This is where you should redirect the consumer to.
     *
     * Recurring payments donâ€™t have a checkout URL.
     */
    getCheckoutUrl: (this: PaymentData) => string | null;
    canBeRefunded: (this: PaymentData) => boolean;
    canBePartiallyRefunded: (this: PaymentData) => boolean;
    /**
     * Returns the total amount that is already refunded. For some payment methods, this amount may be higher than the
     * payment amount, for example to allow reimbursement of the costs for a return shipment to the customer.
     */
    getAmountRefunded: (this: PaymentData) => Amount;
    /**
     * Returns the remaining amount that can be refunded.
     */
    getAmountRemaining: (this: PaymentData) => Amount;
    toPlainObject: (this: import("../Model").default<any, string>) => object;
};
export default _default;
